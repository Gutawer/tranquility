#library "TQ_Aiming"
#include "zcommon.acs"

function int FixedAbs (int value)
{
	if (value >= 0.0) return value;
	return FixedMul(value, -1.0);
}

//------------------------------------------------------------
//
// Manage aim offsets
//
//------------------------------------------------------------


//Track mouse movement for offsets
script "TQ_Tracking" enter
{
	int EyeYaw, EyePitch;
	int OffsetHeadYaw, OffsetHeadPitch;
	int OffsetWeaponYaw, OffsetWeaponPitch;
	while(1)
	{		
		//Get instant offsets for player looking
		EyeYaw=GetPlayerInput(-1,MODINPUT_YAW);
		EyePitch=GetPlayerInput(-1,MODINPUT_PITCH);
		
		//Subtract offsets from current head and weapon offsets,
		//so they "stay still" by comparison
		OffsetHeadYaw=GetUserVariable(0,"user_offsetheadyaw")-EyeYaw;
		OffsetHeadPitch=GetUserVariable(0,"user_offsetheadpitch")-EyePitch;
		
		OffsetWeaponYaw=GetUserVariable(0,"user_offsetweaponyaw")-EyeYaw;
		OffsetWeaponPitch=GetUserVariable(0,"user_offsetweaponpitch")-EyePitch;
		
		//Print yaw angles only for debugging
		//print(f:EyeYaw,s:"\n",
		//	f:OffsetHeadYaw,s:"\n",
		//	f:OffsetWeaponYaw,s:"\n");
		
		SetUserVariable(0,"user_offsetheadyaw",OffsetHeadYaw);
		SetUserVariable(0,"user_offsetheadpitch",OffsetHeadPitch);
		
		SetUserVariable(0,"user_offsetweaponyaw",OffsetWeaponYaw);
		SetUserVariable(0,"user_offsetweaponpitch",OffsetWeaponPitch);
		
		delay(1);
	}
}


//Idle sway
script "TQ_OffsetIdleSway" enter
{
	int OffsetWeaponYaw, OffsetWeaponPitch;
	int v, vector;
	int MovementFactor;
	int SwayPeriod;
	
	while(1)
	{
		for (vector = 0; vector<360;vector++)
		{
		MovementFactor=(FixedAbs(GetActorVelX(0))+FixedAbs(GetActorVelY(0))+FixedAbs(GetActorVelZ(0)));
		MovementFactor=(MovementFactor/2)+0.05; //reduce to desired range, add minimum movement
		If((GetCVar("cl_run")==1 && !(GetPlayerInput(-1, INPUT_BUTTONS) & BT_SPEED)) ||
			(GetCVar("cl_run")==0 && (GetPlayerInput(-1, INPUT_BUTTONS) & BT_SPEED)))
			{ MovementFactor=MovementFactor+0.1; }//Add minimum if in "runmode"
		
		SwayPeriod=MovementFactor*6;
		v=fixeddiv(vector,360);
		v=fixedmul(v,SwayPeriod);
		
		//print(f:GetActorProperty(0,APROP_Height),s:"\n",
		//	i:GetCVar("cl_run"),s:"\n",
		//	f:MovementFactor);
		
		//Get current user variable yaw/pitch offsets
		OffsetWeaponYaw = GetUserVariable(0,"user_offsetweaponyaw");
		OffsetWeaponPitch = GetUserVariable(0,"user_offsetweaponpitch");
		
		OffsetWeaponYaw = OffsetWeaponYaw + fixedmul(MovementFactor,(cos(v)/180));
		OffsetWeaponPitch = OffsetWeaponPitch + fixedmul(MovementFactor,(sin(v*2)/180));
			
		//push the new offset to the user variables
		SetUserVariable(0,"user_offsetweaponyaw",OffsetWeaponYaw);
		SetUserVariable(0,"user_offsetweaponpitch",OffsetWeaponPitch);

		delay(1);
		}
	}
}


//Recoil Handling (sights and view)
script "TQ_RecoilOffset" (int recoiloffset)
{
	int RecoilTwist=random(0.4,0.5)*recoiloffset/4*(-1);
	int RecoilClimb=random(0.9,1.1)*recoiloffset/4;
	
	if (GetActorProperty(0,APROP_Height)<56.0)
	{
		RecoilTwist=RecoilTwist/2;
		RecoilClimb=RecoilClimb/2;
	}
	
	ChangeActorAngle(0,GetActorAngle(0)+(RecoilTwist/360),true);
	ChangeActorPitch(0,GetActorPitch(0)-(RecoilClimb/180),true);
	
	int OffsetWeaponYaw = GetUserVariable(0,"user_offsetweaponyaw");
	int OffsetWeaponPitch = GetUserVariable(0,"user_offsetweaponpitch");
	
	OffsetWeaponYaw=OffsetWeaponYaw+(RecoilTwist/180);
	OffsetWeaponPitch=OffsetWeaponPitch+(RecoilClimb/180);
	
	//Print(f:RecoilTwist,s:"\n",
	//	f:RecoilClimb);
	
	SetUserVariable(0,"user_offsetweaponyaw",OffsetWeaponYaw);
	SetUserVariable(0,"user_offsetweaponpitch",OffsetWeaponPitch);
}


//Return offsets to zero 
script "TQ_OffsetReturn" enter
{
	int OffsetWeaponYaw, OffsetWeaponPitch;
	int OffsetWeaponYawVel, OffsetWeaponPitchVel;
	int OffsetHeadYaw, OffsetHeadPitch;
	int VelFactor = 0.025;
	int VelDecay = 0.8;
	
	while (1)
	{
		//Return weapon offsets by velocity to give "spring" effect
		//Get current user variable yaw/pitch offsets
		OffsetWeaponYaw = GetUserVariable(0,"user_offsetweaponyaw");
		OffsetWeaponPitch = GetUserVariable(0,"user_offsetweaponpitch");
		
		//add a factor of the offset to the return velocity
		OffsetWeaponYawVel = OffsetWeaponYawVel+(fixedmul(OffsetWeaponYaw,VelFactor));
		OffsetWeaponPitchVel = OffsetWeaponPitchVel+(fixedmul(OffsetWeaponPitch,VelFactor));
		
		//reduce the total offset by the velocity
		OffsetWeaponYaw=OffsetWeaponYaw-OffsetWeaponYawVel;
		OffsetWeaponPitch=OffsetWeaponPitch-OffsetWeaponPitchVel;
		
		//decay the velocity by a factor
		OffsetWeaponYawVel=(fixedmul(OffsetWeaponYawVel,VelDecay));
		OffsetWeaponPitchVel=(fixedmul(OffsetWeaponPitchVel,VelDecay));
		
		//push the new offset to the user variables
		SetUserVariable(0,"user_offsetweaponyaw",OffsetWeaponYaw);
		SetUserVariable(0,"user_offsetweaponpitch",OffsetWeaponPitch);
		
		//Return head offsets smoothly, no spring
		//simply reduce the offset by a factor and push to user variables
		OffsetHeadYaw=fixedmul(GetUserVariable(0,"user_offsetheadyaw"),0.5);
		OffsetHeadPitch=fixedmul(GetUserVariable(0,"user_offsetheadpitch"),0.5);
		
		SetUserVariable(0,"user_offsetheadyaw",OffsetHeadYaw);
		SetUserVariable(0,"user_offsetheadpitch",OffsetHeadPitch);
		
		delay(1);
	}
}