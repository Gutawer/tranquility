#library "TQ_Aiming"
#include "zcommon.acs"

//------------------------------------------------------------
//
// Manage aim offsets
//
//------------------------------------------------------------


//Track mouse movement for offsets
script "TQ_Tracking" enter
{
	int EyeYaw, EyePitch;
	int OffsetHeadYaw, OffsetHeadPitch;
	int OffsetWeaponYaw, OffsetWeaponPitch;
	while(1)
	{		
		//Get instant offsets for player looking
		EyeYaw=GetPlayerInput(-1,MODINPUT_YAW);
		EyePitch=GetPlayerInput(-1,MODINPUT_PITCH);
		
		//Subtract offsets from current head and weapon offsets,
		//so they "stay still" by comparison
		OffsetHeadYaw=GetUserVariable(0,"user_offsetheadyaw")-EyeYaw;
		OffsetHeadPitch=GetUserVariable(0,"user_offsetheadpitch")-EyePitch;
		
		OffsetWeaponYaw=GetUserVariable(0,"user_offsetweaponyaw")-EyeYaw;
		OffsetWeaponPitch=GetUserVariable(0,"user_offsetweaponpitch")-EyePitch;
		
		//Print yaw angles only for debugging
		//print(f:EyeYaw,s:"\n",
		//	f:OffsetHeadYaw,s:"\n",
		//	f:OffsetWeaponYaw,s:"\n");
		
		SetUserVariable(0,"user_offsetheadyaw",OffsetHeadYaw);
		SetUserVariable(0,"user_offsetheadpitch",OffsetHeadPitch);
		
		SetUserVariable(0,"user_offsetweaponyaw",OffsetWeaponYaw);
		SetUserVariable(0,"user_offsetweaponpitch",OffsetWeaponPitch);
		
		delay(1);
	}
}

//Return offsets to zero 
script "TQ_OffsetReturn" enter
{
	int OffsetWeaponYaw, OffsetWeaponPitch;
	int OffsetWeaponYawVel, OffsetWeaponPitchVel;
	int OffsetHeadYaw, OffsetHeadPitch;
	int VelFactor = 0.025;
	int VelDecay = 0.85;
	
	while (1)
	{
		//Return weapon offsets by velocity to give "spring" effect
		//Get current user variable yaw/pitch offsets
		OffsetWeaponYaw = GetUserVariable(0,"user_offsetweaponyaw");
		OffsetWeaponPitch = GetUserVariable(0,"user_offsetweaponpitch");
		
		//add a factor of the offset to the return velocity
		OffsetWeaponYawVel = OffsetWeaponYawVel+(fixedmul(OffsetWeaponYaw,VelFactor));
		OffsetWeaponPitchVel = OffsetWeaponPitchVel+(fixedmul(OffsetWeaponPitch,VelFactor));
		
		//reduce the total offset by the velocity
		OffsetWeaponYaw=OffsetWeaponYaw-OffsetWeaponYawVel;
		OffsetWeaponPitch=OffsetWeaponPitch-OffsetWeaponPitchVel;
		
		//decay the velocity by a factor
		OffsetWeaponYawVel=(fixedmul(OffsetWeaponYawVel,VelDecay));
		OffsetWeaponPitchVel=(fixedmul(OffsetWeaponPitchVel,VelDecay));
		
		//push the new offset to the user variables
		SetUserVariable(0,"user_offsetweaponyaw",OffsetWeaponYaw);
		SetUserVariable(0,"user_offsetweaponpitch",OffsetWeaponPitch);
		
		//Return head offsets smoothly, no spring
		//simply reduce the offset by a factor and push to user variables
		OffsetHeadYaw=fixedmul(GetUserVariable(0,"user_offsetheadyaw"),0.5);
		OffsetHeadPitch=fixedmul(GetUserVariable(0,"user_offsetheadpitch"),0.5);
		
		SetUserVariable(0,"user_offsetheadyaw",OffsetHeadYaw);
		SetUserVariable(0,"user_offsetheadpitch",OffsetHeadPitch);
		
		delay(1);
	}
}