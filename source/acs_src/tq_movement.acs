#library "TQ_Movement"
#include "zcommon.acs"

// check if player is on ground (from NashMove)
function int CheckPlayerOnGround(void)
{
	int onground;
	if(GetActorZ (0) == GetActorFloorZ (0) || GetActorVelZ(0) == 0 && !Spawn("Nash_FloorCheck", GetActorX(0), GetActorY(0), GetActorZ(0) - (4 << 16), 0, GetActorAngle(0)))
	{
		onground = 1;
		//SetFont("smallfont");
		//Print(s: "on ground");
	}
	else
	{
		onground = 0;
		//SetFont("smallfont");
		//Print(s: "in air");
	}
	return onground;
}


//------------------------------------------------------------
//
// Manage movement-related stuffs
//
//------------------------------------------------------------

script "TQ_MoveSpeed" enter
{
	int CurrentHealth;
	int AdjustedSpeed;
	
	while(1)
	{
		CurrentHealth=GetActorProperty(0,APROP_Health);
		AdjustedSpeed=fixeddiv(currenthealth,25);
		If (AdjustedSpeed>1.0) { AdjustedSpeed=1.0; }
		if (AdjustedSpeed<0.5) { AdjustedSpeed=0.5; }
		
		SetActorProperty(0,APROP_Speed,AdjustedSpeed);
		
		//print(f:GetActorProperty(0,APROP_Speed));
		
		delay(1);		
	}
}

script "TQ_JumpHeight" enter
{
	int Stamina;
	int NewJumpZ;
	while(1)
	{
		Stamina=GetActorProperty(0,APROP_Stamina);
		NewJumpZ=fixedmul(6.0,fixeddiv(Stamina,100));
		SetActorProperty(0,APROP_JumpZ,NewJumpZ);
		delay(1);
	}	
}


script "TQ_Dashing" enter
{
	int LeftTaps, RightTaps, ForwardTaps;	
	int Dash, DashAngle, DashRegen;
	
	while (1)
	{
		DashAngle=GetActorAngle(0) >> 8;
		
		for (int i=1; i<=15; i++)
		{
			//print(i:ForwardTaps,s:"\n",i:i);
			if ((GetPlayerInput(-1,INPUT_BUTTONS) & BT_FORWARD) && !(GetPlayerInput(-1,INPUT_OLDBUTTONS) & BT_FORWARD))
			{	ForwardTaps++; i=1; }
			else if ((GetPlayerInput(-1,INPUT_BUTTONS) & BT_MOVELEFT) && !(GetPlayerInput(-1,INPUT_OLDBUTTONS) & BT_MOVELEFT))
			{	LeftTaps++; i=1; }
			else if ((GetPlayerInput(-1,INPUT_BUTTONS) & BT_MOVERIGHT) && !(GetPlayerInput(-1,INPUT_OLDBUTTONS) & BT_MOVERIGHT))
			{	RightTaps++; i=1; }
			
			if (ForwardTaps >= 2)
			{
				//print(i:ForwardTaps,s:"\nDoubleTap Dash!");
				Dash=20;
				DashRegen=70;
				break;
			}
			
			if (LeftTaps >= 2)
			{
				//print(i:ForwardTaps,s:"\nDoubleTap Dash!");
				Dash=15;
				DashAngle+=64;
				DashRegen=35;
				break;
			}
			
			if (RightTaps >= 2)
			{
				//print(i:ForwardTaps,s:"\nDoubleTap Dash!");
				Dash=15;
				DashAngle+=192;
				DashRegen=35;
				break;
			}
			delay(1);
		}
		
		if (ForwardTaps>0)
		{ ForwardTaps--; }
		if (LeftTaps>0)
		{ LeftTaps--; }
		if (RightTaps>0)
		{ RightTaps--; }
		
		while(Dash>0)
		{
			if (CheckPlayerOnGround()==0)
			{	Dash=0; }
			ThrustThing(DashAngle, 3, 0, 0);
			Dash--;
			delay(1);
		}
		
		if(DashRegen>1)
		{
			//print(s:"cooldown...");
			ForwardTaps=0;
			LeftTaps=0;
			RightTaps=0;
		}
		
		delay(DashRegen);
		DashRegen=1;
	}
}

script "TQ_Mantling" enter	//somewhat taken from Hideous Destructor, heavily modified and simplified
{
	int mantleheight;
	int stamina;
	int jumpdelay;
	Spawn ("Mantler",
		GetActorX(0)+(Cos(getactorangle(0))*24),
		GetActorY(0)+(sin(getactorangle(0))*24),
		GetActorZ(0),89430+PlayerNumber(),
		GetActorAngle(0)>>8);
	while(1)
	{
		stamina=GetActorProperty(0,APROP_Stamina);
		Warp(89430+PlayerNumber(),
			GetActorX(0)+(Cos(getactorangle(0))*24),
			GetActorY(0)+(sin(getactorangle(0))*24),
			GetActorZ(0),
			GetActorAngle(0)>>8,
			WARPF_ABSOLUTEPOSITION|WARPF_MOVEPTR|WARPF_TOFLOOR|WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
		mantleheight=GetActorZ(89430+PlayerNumber())-GetActorZ(0);
		
		if ((GetPlayerInput (-1, MODINPUT_BUTTONS) & BT_JUMP) && !(GetPlayerInput (-1, MODINPUT_BUTTONS) & BT_CROUCH))
		{
			if (mantleheight <= 48.0 && mantleheight > 24.0)
			{
				ThrustThingZ(0,(stamina/25)+1,0,0);
				stamina=stamina-1;
			}
		}
		If(stamina<0)
		{	stamina=0; }
		SetActorProperty(0,APROP_Stamina,stamina);

		delay(1);
	}
}