//------------------------------------------------------------
//
// Imported SidDoyle's RealAim, updated library name
//
//------------------------------------------------------------

#library "realaim"
#include "zcommon.acs"

function int abs (int value)
{
	if (value < 0)
		return value * -1;
	return value;
}

function int min (int a, int b)
{
	if (a < b) return a;
	return b;
}

script 1991 ENTER
{
	int true_angle = GetActorAngle(0);
	int true_pitch = GetActorPitch(0);
	int angle;
	int pitch;
	int dx = 0;
	int dy = 0;
	while(true)
	{
		angle = GetActorAngle(0);
		pitch = GetActorPitch(0);
		delay(1);
		int new_angle = GetActorAngle(0);
		int new_pitch = GetActorPitch(0);
		true_angle += new_angle - angle;
		true_pitch += new_pitch - pitch;
		while (true_angle > 1.0) true_angle -= 1.0;
		while (true_angle < 0.0) true_angle += 1.0;
		if (true_pitch > 0.25) true_pitch = 0.25;
		if (true_pitch < -0.25) true_pitch = -0.25;
		int dx2;
		if (angle < new_angle)
		{
			if (abs(new_angle - angle) < abs(new_angle - (angle + 1.0)))
				dx2 = new_angle - angle;
			else
				dx2 = new_angle - (angle + 1.0);
		}
		else
		{
			if (abs(new_angle - angle) < abs(new_angle - angle + 1.0))
				dx2 = new_angle - angle;
			else
				dx2 = new_angle - angle + 1.0;
		}
		int vel = abs(GetActorVelX(0)) + abs(GetActorVelY(0)) + abs(GetActorVelZ(0));
		vel = FixedMul(vel, 0.001);
		dx = FixedMul(dx + dx2, min(0.875 + vel, 0.99));
		dy = FixedMul(dy + (new_pitch - pitch), min(0.825 + vel, 0.99));
		int loopy = FixedMul((Timer() << 16), 0.01);
		int loopy2 = FixedMul((Timer() << 16), 0.02);
		int mx = FixedMul(sin(loopy), 0.00024 + vel + abs(dx)/15);
		int my = FixedMul(sin(loopy2), 0.00048 + vel + abs(dy)/15);/*
		mx = FixedMul(dx*50, mx + vel*4);
		my = FixedMul(dy*50, my + vel*4);
		if (mx < -0.9) mx = -0.9;
		if (mx > 0.9) mx = 0.9;
		if (my < -0.24) my = -0.24;
		if (my > 0.24) my = 0.25;*/
		dx += mx;
		dy += my;
		if (new_angle < true_angle)
		{
			if (abs(true_angle - new_angle) < abs(true_angle - (new_angle + 1.0)))
				angle = ((new_angle + dx/15) + true_angle)/2;
			else
				angle = ((new_angle + dx/15) + (true_angle - 1.0))/2;
		}
		else
		{
			if (abs(true_angle - new_angle) < abs(true_angle - new_angle + 1.0))
				angle = ((new_angle + dx/15) + true_angle)/2;
			else
				angle = ((new_angle + dx/15) + (true_angle + 1.0))/2;
		}
		pitch = ((new_pitch + dy/15) + true_pitch*2)/3;
		while (angle > 1.0) angle -= 1.0;
		while (angle < 0.0) angle += 1.0;
		if (pitch > 0.25) pitch = 0.25;
		if (pitch < -0.25) pitch = -0.25;
		ChangeActorAngle(0, angle, true);
		ChangeActorPitch(0, pitch, true);
	}
}