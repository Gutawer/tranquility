version "2.5"

//------------------------------------------------------------
//
// Base weapon class and functions
//
//------------------------------------------------------------
class TQ_Weapon : Weapon {
	//Credit to SanyaWaffles via Discord for the idea of these functions
	action bool TQ_CheckButtonPress(int btn) {
		return ((GetPlayerInput(INPUT_BUTTONS) & btn) && !(GetPlayerInput(INPUT_OLDBUTTONS) & btn));
	}

	action bool TQ_CheckButtonHold(int btn) {
		return (GetPlayerInput(INPUT_BUTTONS) & btn);
	}

	action bool TQ_CheckButtonRelease(int btn) {
		return ((GetPlayerInput(INPUT_OLDBUTTONS) & btn) && !(GetPlayerInput(INPUT_BUTTONS) & btn));
	}
}

struct ChamberData {
	bool Live; //Is the round fire-able
	bool Loaded; //Is there a round in the chamber
}

struct SlideData {
	double Pos; //Where the slide is. 0=forward, 1=fully back
	double Spring; //How much the slide tries to move forward every tic
	double Pressure; //How much back-pressure is currently applied to the slide
	bool Locked; //Is the slide lock engaged
}

struct MagData {
	int MaxRounds; //Maximum number of rounds in magazine
	int Rounds; //Current rounds in magazine
	bool Inserted; //Is mag currently in gun
}

//------------------------------------------------------------
//
// Pistol Weapon
//
//------------------------------------------------------------
class TQ_Pistol : TQ_Weapon {

	const MagLayer = 2;
	const FrameLayer = 3;
	const SlideLayer = 4;

	ChamberData Chamber; //Initialze chamber
	SlideData Slide; //Initialize slide
	MagData Mags[4]; //Initialize magazine array
	int MagIndex; //Current working magazine
	bool SafetyOn; //Is the safety engaged
	bool DoingPressCheck; //Is a press check being done

	Default	{
		Weapon.SlotNumber 2;
		Weapon.AmmoType "Clip"; //Temporary tracking for rounds in mag
		Weapon.AmmoType2 "RocketAmmo"; //temporary tracking for round in chamber
	}

	override void PostBeginPlay() {
		//Set up slide values, randomize some
		Slide.Pos = 0.0;
		Slide.Spring = 0.5;
		Slide.Pressure = 0.0;
		Slide.Locked = false;
		if(random(0,1) == 1) {
			Slide.Pos = 1.0;
			Slide.Locked = true;
		}

		//Set up chamber values, randomize some
		Chamber.Loaded = false;
		if(random(0,1) == 1) {
			Chamber.Loaded = true;
			Chamber.Live = true;
		}

		//Set up magazines, randomize some
		MagIndex = random(1,3);
		for(int i = 1;i <= 3;i++) {
			Mags[i].MaxRounds = 7;
			Mags[i].Rounds = random(0,Mags[i].MaxRounds);
		}
		Mags[MagIndex].Inserted = true;
		super.PostBeginPlay();
	}

	override void Tick() {

		//Bookkeeping
		if(!Chamber.Loaded) Chamber.Live=false; //if no round in chamber, it can't be live either

		//Slide routines that happen automatically
		for(int i=1; i<=100; i++) {

			if((Slide.Locked) & (Slide.Pos >= 0.8)) {
				Slide.Pos -= ((Slide.Spring - Slide.Pressure)/100); //Spring pushes slide forward
				Slide.Pos = clamp(Slide.Pos, 0.8, 1); //Keep slide back if lock engaged and slide is behind it
			}
			else if((DoingPressCheck) & (Slide.Pos <= 0.5)) {
				Slide.Pos -= ((Slide.Spring - Slide.Pressure)/100); //Spring pushes slide forward
				Slide.Pos = clamp(Slide.Pos, 0.0, 0.5); //Keep slide partially forward if press-checking
			}
			else {
				Slide.Pos -= ((Slide.Spring - Slide.Pressure)/100); //Spring pushes slide forward
				Slide.Pos = clamp(Slide.Pos, 0, 1); //Allow full travel otherwise
			}

			if((!TQ_SlideMovingBack()) & (Slide.Pos < 0.8) & (!TQ_CheckSlideForward())) {
				TQ_LoadRoundFromMag(); //Always attempt to load a round if slide going forward and past lock
			}

			if((TQ_SlideMovingBack()) & (Slide.Pos > 0.9)) {
				Slide.Locked = false; //Disengage slide lock, will auto-engage if needed
				TQ_EjectRound(); //Always attempt to eject a round if slide going back and past 80%
			}

			if(Mags[MagIndex].Inserted && Mags[MagIndex].Rounds == 0) {
				Slide.Locked = true;
			}
		}

		super.Tick();
    }

	States {
		Spawn:
			PISG P -1;
			Loop;
		Select:
			TNT1 A 0 TQ_InitializeOverlays;
		SelectLoop:
			TNT1 A 1 A_Raise;
			Loop;
		Deselect:
			TNT1 A 1 A_Lower;
			Loop;
		Fire:
			//Placeholder
		Ready:
			//Intentional fallthrough to Primary context

		//Primary Weapon Action States
		Primary.Ready:
			TNT1 A 1 TQ_PrimaryInput;
			Loop;
		Primary.Fire:
			TNT1 A 1 TQ_PullTrigger;
			TNT1 A 1 { invoker.slide.pressure = 0; }
			Goto Primary.Ready;

		//Alt weapon action States
		Alt.Ready:
			TNT1 A 1 TQ_AltInput;
			Loop;
		Alt.ReleaseLock:
			TNT1 A 1 TQ_ReleaseSlideLock;
			Goto Alt.Ready;
		Alt.EngageLock:
			TNT1 A 1 TQ_EngageSlideLock;
			Goto Alt.Ready;
		Alt.Pullslide:
			TNT1 A 1 TQ_PullSlide;
			Goto Alt.Ready;
		Alt.PressCheck:
			TNT1 A 1 TQ_PressCheck;
			Goto Alt.Ready;

		Reload.Ready:
			TNT1 A 1 TQ_ReloadInput;
			Loop;
		Reload.Toggle:
			TNT1 A 1 TQ_MagToggle;
			Goto Reload.Ready;
		Reload.MagRelease:
			TNT1 A 0 TQ_MagRelease;
			TNT1 AAAA 1 A_OverlayOffset(MagLayer,-2,8,WOF_ADD);
			TNT1 AAAAAAAA 1 A_OverlayOffset(MagLayer,-8,0,WOF_ADD);
			TNT1 AAAA 1 A_OverlayOffset(MagLayer,0,-8,WOF_ADD);
			Goto Reload.Ready;
		Reload.NextMag:
			TNT1 A 1;
			TNT1 A 1 {
				if(invoker.Mags[invoker.MagIndex].Inserted) return ResolveState("Reload.Ready");
				return ResolveState(null);
			}
			TNT1 AAAAAAAA 1 A_OverlayOffset(MagLayer,0,8,WOF_ADD);
			TNT1 A 0 TQ_PickNextMag;
			TNT1 AAAAAAAA 1 A_OverlayOffset(MagLayer,0,-8,WOF_ADD);
			Goto Reload.Ready;
		Reload.MagInsert:
			TNT1 AAAA 1 A_OverlayOffset(MagLayer,0,8,WOF_ADD);
			TNT1 AAAAAAAA 1 A_OverlayOffset(MagLayer,8,0,WOF_ADD);
			TNT1 AAAA 1 A_OverlayOffset(MagLayer,2,-8,WOF_ADD);
			TNT1 A 0 TQ_MagInsert;
			Goto Reload.Ready;

		//Overlays
		MagOverlay:
			9MAG A 1; /*{
				A_OverlayOffset(MagLayer,0.0,0,WOF_KEEPY);
				if(!invoker.Mags[invoker.MagIndex].Inserted) {
					A_OverlayOffset(MagLayer,-64.0,0,WOF_KEEPY);
				}
			}*/
			Loop;
		FrameOverlay:
			9FRM A 1;
			Loop;
		SlideOverlay:
			9SLD A 1 A_OverlayOffset(SlideLayer,-16.0 * invoker.Slide.Pos,0,0);
			TNT1 A 0 {
				//Debugging
				A_SetInventory("Clip",invoker.Mags[invoker.MagIndex].Rounds);
				if(invoker.Chamber.Loaded) SetInventory("RocketAmmo",1);
				else SetInventory("RocketAmmo",0);
			}
			Loop;
	}

	action void TQ_InitializeOverlays() {
		A_SetCrosshair(99); //Set null crosshair (assuming player doesn't override it)
		A_Overlay(MagLayer,"MagOverlay");
		A_Overlay(FrameLayer,"FrameOverlay");
		A_Overlay(SlideLayer,"SlideOverlay");
		A_OverlayFlags(MagLayer,PSPF_ADDBOB,0);
		A_OverlayFlags(FrameLayer,PSPF_ADDBOB,0);
		A_OverlayFlags(SlideLayer,PSPF_ADDBOB,0);
	}

	//Primary Input Loop
	action state TQ_PrimaryInput() {
		A_Print("Primary",0.5);
		if(TQ_CheckButtonPress(BT_ATTACK)) return ResolveState("Primary.Fire");
		if(TQ_CheckButtonHold(BT_RELOAD)) return ResolveState("Reload.Ready");
		if(TQ_CheckButtonHold(BT_ALTATTACK)) return ResolveState("Alt.Ready");
		A_WeaponReady(WRF_NOFIRE|WRF_NOPRIMARY|WRF_NOSECONDARY);
		return ResolveState(null);
	}

	//Alt Context Input Loop
	action state TQ_AltInput() {
		A_Print("Alt",0.5);
		if(!TQ_CheckButtonHold(BT_ALTATTACK)) {
			invoker.DoingPressCheck = false;
			invoker.Slide.Pressure = 0;
			return ResolveState("Primary.Ready");
		}

		if(TQ_CheckButtonHold(BT_RELOAD)) return ResolveState("Alt.PullSlide");
		if(TQ_CheckButtonPress(BT_ATTACK)) return ResolveState("Alt.ReleaseLock");
		if(!TQ_CheckButtonHold(BT_RELOAD)) invoker.Slide.Pressure = 0;
		if(TQ_CheckButtonHold(BT_ATTACK)) return ResolveState("Alt.PressCheck");
		if(invoker.DoingPressCheck && !TQ_CheckButtonHold(BT_ATTACK)) invoker.DoingPressCheck = false;
		A_WeaponReady(WRF_NOFIRE|WRF_NOPRIMARY|WRF_NOSECONDARY);
		return ResolveState(null);
	}

	//Reload Context Input Loop
	action state TQ_ReloadInput() {
		A_Print("Reload",0.5);
		if(!TQ_CheckButtonHold(BT_RELOAD)) return ResolveState("Primary.Ready");

		if(TQ_CheckButtonPress(BT_ATTACK)) return ResolveState("Reload.Toggle");
		if(TQ_CheckButtonPress(BT_ALTATTACK)) return ResolveState("Reload.NextMag");
		A_WeaponReady(WRF_NOFIRE|WRF_NOPRIMARY|WRF_NOSECONDARY);
		return ResolveState(null);
	}

	action void TQ_ReleaseSlideLock() {
		invoker.Slide.Locked = false;
	}

	action void TQ_EngageSlideLock() {
		invoker.Slide.Locked = true;
	}

	action void TQ_PullSlide() {
		if(!invoker.DoingPressCheck && invoker.Slide.Pos > 0.8 && (TQ_CheckButtonHold(BT_ATTACK))) TQ_EngageSlideLock();
		invoker.Slide.Pressure += 0.1; //Increase back-pressure as held
	}

	action void TQ_PressCheck() {
		if(invoker.Slide.Pos < 0.5) {
			invoker.DoingPressCheck = true;
		}
	}

	action void TQ_PullTrigger() {
		if(TQ_CheckSlideForward() && invoker.Chamber.Live) {
			invoker.Slide.Pressure = 10;
			invoker.Chamber.Live = false;
			A_PlaySound("weapons/pistol",CHAN_AUTO);
		}
	}

	action void TQ_EjectRound() {
		if(invoker.Chamber.Loaded) invoker.Chamber.Loaded=false;
	}

	action void TQ_LoadRoundFromMag() {
		if(!invoker.Chamber.Loaded && invoker.Mags[invoker.MagIndex].Inserted && invoker.Mags[invoker.MagIndex].Rounds > 0) {
			invoker.Chamber.Loaded = true;
			invoker.Chamber.Live = true;
			invoker.Mags[invoker.MagIndex].Rounds -= 1;
		}
	}

	action state TQ_MagToggle() {
		if(invoker.Mags[invoker.MagIndex].Inserted) return ResolveState("Reload.MagRelease"); //Drop the mag if inserted
		return ResolveState("Reload.MagInsert"); //Otherwise insert it
	}

	action void TQ_MagRelease() {
		if(invoker.Mags[invoker.MagIndex].Inserted) {
			A_PlaySound("TQMagDrop",CHAN_AUTO);
			invoker.Mags[invoker.MagIndex].Inserted = false;
		}
	}

	action void TQ_MagInsert() {
		if(!invoker.Mags[invoker.MagIndex].Inserted) {
			A_PlaySound("TQMagIn",CHAN_AUTO);
			invoker.Mags[invoker.MagIndex].Inserted = true;
		}
	}

	action void TQ_MagicReload() {
		invoker.Mags[invoker.MagIndex].Rounds = 7;
	}

	action void TQ_PickNextMag() {
		invoker.MagIndex += 1;
		if(invoker.MagIndex > 3) invoker.MagIndex = 1;
	}

	action bool TQ_CheckSlideForward() {
		return (invoker.Slide.Pos == 0); //True if pos at zero
	}

	action bool TQ_SlideMovingBack() {
		if ((invoker.Slide.Pressure - invoker.Slide.Spring > 0) & (invoker.Slide.Pos != 1) & (invoker.Slide.Pos != 0)) {
			return true;
		}
		return false;
	}
}

//------------------------------------------------------------
//
// Player Definition
//
//------------------------------------------------------------
class TQ_Player : Doomplayer
{
	Default {
		Player.StartItem "TQ_Pistol";
		Player.StartItem "Fist";
		Player.Viewheight 50;
		Player.AttackZOffset 26;
		Player.ForwardMove 1.0;
		Player.SideMove 0.8;
		Player.RunHealth 35;
		Player.JumpZ 5.0;
	}
}